<h1><%= @problem.title %></h1>

<p><%= simple_format(@problem.description) %></p>

<h2>お題コード</h2>
<pre><%= @problem.initial_code %></pre>

<div class="hint-section" style="margin-bottom: 20px; padding: 10px; background-color: #f8f9fa; border: 1px solid #e9ecef; border-radius: 5px;">
  <h3 style="margin-top: 0;">ヒント</h3>
  
  <% if @problem.expected_output.present? %>
    <div style="margin-bottom: 10px;">
      <strong>期待する出力:</strong> <code><%= @problem.expected_output %></code>
    </div>
  <% end %>
  
  <% if @available_symbols && (@available_symbols[:variables].any? || @available_symbols[:methods].any? || @available_symbols[:classes].any?) %>
    <div>
      <strong>利用可能な名前:</strong>
      
      <% if @available_symbols[:variables].any? %>
        <div style="margin-left: 10px;">
          <strong>変数:</strong>
          <code><%= @available_symbols[:variables].join(", ") %></code>
        </div>
      <% end %>
      
      <% if @available_symbols[:methods].any? %>
        <div style="margin-left: 10px;">
          <strong>メソッド:</strong>
          <code><%= @available_symbols[:methods].join(", ") %></code>
        </div>
      <% end %>
      
      <% if @available_symbols[:classes].any? %>
        <div style="margin-left: 10px;">
          <strong>クラス:</strong>
          <code><%= @available_symbols[:classes].join(", ") %></code>
        </div>
      <% end %>
    </div>
  <% end %>
</div>

<h2>あなたの回答</h2>

<!-- エラーメッセージ表示領域（固定高さ、スクロール可能） -->
<div id="error-message" style="color: red; display: none; max-height: 100px; overflow-y: auto; border: 1px solid #ffcccc; background-color: #fff8f8; padding: 10px; margin-bottom: 15px;"></div>

<!-- 結果表示領域（固定高さ、スクロール可能） -->
<div id="result-message" style="display: none;">
  <h3>評価結果: <span id="result-status"></span></h3>
  <h4>出力:</h4>
  <pre id="result-output" style="max-height: 150px; overflow-y: auto; border: 1px solid #eee; background-color: #f9f9f9; padding: 10px;"></pre>
  <div id="return-value-container" style="display: none;">
    <h4>戻り値:</h4>
    <pre id="result-return-value" style="max-height: 100px; overflow-y: auto; border: 1px solid #eee; background-color: #f9f9f9; padding: 10px;"></pre>
  </div>
  <p><a href="<%= problems_path %>">お題一覧に戻る</a></p>
</div>

<%= form_with url: answers_path, method: :post, id: "answer-form" do |f| %>
  <%= hidden_field_tag :problem_id, @problem.id %>
  <%= f.text_area :user_code, rows: 10, cols: 80 %><br>
  <%= f.submit "提出して評価", id: "submit-button" %>
<% end %>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const form = document.getElementById('answer-form');
  const errorMessage = document.getElementById('error-message');
  const resultMessage = document.getElementById('result-message');
  const resultStatus = document.getElementById('result-status');
  const resultOutput = document.getElementById('result-output');
  const returnValueContainer = document.getElementById('return-value-container');
  const resultReturnValue = document.getElementById('result-return-value');
  
  form.addEventListener('submit', function(e) {
    e.preventDefault();
    
    // エラーと結果をクリア
    errorMessage.style.display = 'none';
    resultMessage.style.display = 'none';
    
    // フォームデータを取得
    const formData = new FormData(form);
    
    // Ajaxリクエスト
    fetch(form.action, {
      method: 'POST',
      body: formData,
      headers: {
        'Accept': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      },
      credentials: 'same-origin'
    })
    .then(response => response.json())
    .then(data => {
      if (data.result === 'syntax_error') {
        // シンタックスエラーの場合
        errorMessage.innerHTML = `<strong>構文エラー:</strong> ${formatErrorMessage(data.output)}`;
        errorMessage.style.display = 'block';
      } else {
        // 正常に評価された場合
        resultStatus.textContent = data.result;
        resultOutput.textContent = data.output;
        
        // 戻り値の表示
        if (data.return_value) {
          resultReturnValue.textContent = data.return_value;
          returnValueContainer.style.display = 'block';
        } else {
          returnValueContainer.style.display = 'none';
        }
        
        resultMessage.style.display = 'block';
      }
    })
    .catch(error => {
      errorMessage.textContent = '通信エラーが発生しました。もう一度お試しください。';
      errorMessage.style.display = 'block';
      console.error('Error:', error);
    });
  });
  
  // エラーメッセージを整形する関数
  function formatErrorMessage(message) {
    // 行番号を抽出
    const lineMatch = message.match(/line (\d+)/);
    const lineNumber = lineMatch ? lineMatch[1] : null;
    
    // エラーメッセージを整形
    let formattedMessage = message.split("\n")[0]; // 最初の行だけ取得
    if (lineNumber) {
      formattedMessage += ` (${lineNumber}行目)`;
    }
    
    return formattedMessage + '<br>コードを修正して再度お試しください。';
  }
});
</script>
